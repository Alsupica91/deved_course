difference between primitiv and reference data-type

primitiv: number, string, bolean, undefined, null
reference: array, objects

array are declared using [] | exemple : const names = ["Ed", "Me", "You"];
objects are declared using {} | exemple :
	const tweet = {
		name: "Krow",
		tweets: 20,
		age: 28
	};

big difference:
	if you const to declare variable, you can't change if primitiv
	but if you have 3 names on your array, you can change the name
		but you can't redefine the array itself

	assigning value for primitiv is like in C.
	whereas for reference type, they work like pointers in C
		so for exemple :
			const names = ["ed","you","me"];
			const newNames = names;

			if you change the array using newNames, it is changed for names too
			because they point to the same address most likely

			/!\ So the question is, how does that work in regard of scope ?
				did the test and it's just like C !
				if you modify the array using newNames in a if()
				because it's a pointer, names will be modified too

CALLBACKS, HIGHER ORDER FUCNTIONS

in the list.forEach(function (item) {xxx});
 we see that item is declared and is auto incremented

forEach is a higher order function: a function that takes a function as argument
and a callback function is the function that is called as argument;

EXEMPLES OF HIGHER ORDER FUCNTIONS
	forEach = loops in array and exec function for each elem
	map = is the same but create a new array that can be returned
		so the new array gets the values from the successiv returns

GROSSE DIFFERENCE ENTRE FOREACH ET MAP /!\
	ForEach change l'elem de base tandis que map fait une copie puis lui applique la fonction

find function
	prend aussi un return (comme map) mais aussi une condition, et return le premier elem
	qui est true (exemple : return video.includes("html"); pourrait ret "mon tuto sur l'html" )

filter function
	la meme mais return plusieurs truc qui remplissent la condition, pas juste le premier

Les fonctions peuvent etre enregistre dans une variable
functions are objects